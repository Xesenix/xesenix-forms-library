{"name":"Xesenix Forms Library","tagline":"It's a micro framework for creating forms in php.","body":"Xesenix Forms Library\r\n====================\r\n\r\nAbout\r\n---------------------\r\n\r\nIts a micro framework for creating forms in php.\r\nTo start using just download run composer for adding dependencies and class autoloader.\r\n\r\n\r\nHow to start\r\n---------------------\r\n\r\nFirst download this project second run composer to install dependencies:\r\n\r\n\t./php composer.phar install\r\n\r\nWhen finished go see examples.\r\n\r\n\r\nExample\r\n---------------------\r\n\r\nIt's in early stage of development but can be quite usefull see examples.\r\n\r\n\t<?php\r\n\t// autoloader and request handling may be altered if you run it from diffrent path then examples are placed.\r\n\tinclude(__DIR__ . '/../vendor/autoload.php');\r\n\t\r\n\t$form = new Xes_Form('formNameUsedAssNamespaceForItsData');\r\n\r\nFor main form (not subforms) you should setup action and method. \r\n\r\n\t$form\r\n\t->setAction('?validate')\r\n\t->setMethod('POST');\r\n\r\nIf you want create subform you can do it something like that:\r\n\r\n\t$subform = new Xes_Form('subform');\r\n\t$subform->setTag(null); // disable form tag as it will be used as subform\r\n\t$form->add($subform);\r\n\r\nNext you can assemble your form elements. Its very similar to forms in ZendFramework.\r\n\r\n\t$form\r\n\t->add(array(null, 'formFieldName', array(// if passed null default class Xes_Form_Field is used \r\n\t\t'label' => 'Value used as field label',\r\n\t\t'attr' => array(\r\n\t\t\t'class' => 'text-field', // those attributes are used by form\r\n\t\t),\r\n\t\t'formatters' => array(// each array is equivalent for 'new param[0](param[1], param[2], ...)'\r\n\t\t\tarray('Xes_Formatter_NullToString', ''), // converts field element value to string \r\n\t\t),\r\n\t\t'validators' => array(// each array is equivalent for 'new param[0](param[1], param[2], ...)'\r\n\t\t\tarray('Xes_Validator_NotNull', 'This param is required!'), // used for form validation\r\n\t\t),\r\n\t\t'decorators' => array(// each array is equivalent for 'new param[0](param[1], param[2], ...)'\r\n\t\t\tarray('Xes_Decorator_Tag', 'value', 'div', array('class' => 'input-field-container-class'),),\r\n\t\t\tarray('Xes_Decorator_FormFieldLabel', 'label', array('class' => 'label-class'), array('position' => Xes_Decorator::PREPEND)), // for displaying label\r\n\t\t\tarray('Xes_Decorator_FormFieldErrors', 'errors', array('class' => 'errors-list-class'), array('position' => Xes_Decorator::APPEND)), // for displaying errors\r\n\t\t\tarray('Xes_Decorator_Tag', 'header', 'h3', array('class' => 'strange-header-class'), 'Strange Place for adding header!', array('position' => Xes_Decorator::PREPEND)), // field will be prepended with header tag\r\n\t\t\tarray('Xes_Decorator_Tag', 'fieldset', 'div', array('class' => 'full-composited-field-class'), 'Will be ignored as position is override', array('position' => Xes_Decorator::OVERRIDE)), // field will be embraced with div tag\r\n\t\t),\r\n\t\t'errorBubbling' => false, // if errors should be pass to parent element\r\n\t)));\r\n\r\nOr alternatively (equivalent of above method):\r\n\r\n\t$form\r\n\t->add(new Xes_Form_Field('formFieldName', array(\r\n\t\t'label' => 'Value used as field label',\r\n\t\t'attr' => array(\r\n\t\t\t'class' => 'text-field', // those attributes are used by form\r\n\t\t),\r\n\t\t'formatters' => array(// each array is equivalent for 'new param[0](param[1], param[2], ...)'\r\n\t\t\tnew Xes_Formatter_NullToString(''), // converts field element value to string \r\n\t\t),\r\n\t\t'validators' => array(// each array is equivalent for 'new param[0](param[1], param[2], ...)'\r\n\t\t\tnew Xes_Validator_NotNull('This param is required!'), // used for form validation\r\n\t\t),\r\n\t\t'decorators' => array(// each array is equivalent for 'new param[0](param[1], param[2], ...)'\r\n\t\t\tnew Xes_Decorator_Tag('value', 'div', array('class' => 'input-field-container-class'),),\r\n\t\t\tnew Xes_Decorator_FormFieldLabel('label', array('class' => 'label-class'), array('position' => Xes_Decorator::PREPEND)), // for displaying label\r\n\t\t\tnew Xes_Decorator_FormFieldErrors('errors', array('class' => 'errors-list-class'), array('position' => Xes_Decorator::APPEND)), // for displaying errors\r\n\t\t\tnew Xes_Decorator_Tag('header', 'h3', array('class' => 'strange-header-class'), 'Strange Place for adding header!', array('position' => Xes_Decorator::PREPEND)), // field will be prepended with header tag\r\n\t\t\tnew Xes_Decorator_Tag'('fieldset', 'div', array('class' => 'full-composited-field-class'), 'Will be ignored as position is override', array('position' => Xes_Decorator::OVERRIDE)), // field will be embraced with div tag\r\n\t\t),\r\n\t\t'errorBubbling' => false, // if errors should be pass to parent element\r\n\t)));\r\n\r\nTo change form elements you can ask for them by their formFieldName or decoratorName\r\n\r\n\t$form->formFieldName->getDecorator('decoratorName')->getNode()->addCssClass('another-css-class');\r\n\r\nIn this way you can even add decorators that will decorate decorator base output (I don't know if it's even posible in Zend Framework):\r\n\r\n\t$form->formField\r\n\t->getDecorator()\r\n\t->setDecorators(// those decorators are for form field\r\n\t\tarray(\r\n\t\t\tarray('Xes_Decorator_Tag', 'tag1', 'div', array('class' => 'field-decorator-1'),),// default override\r\n\t\t\tarray('Xes_Decorator_FormFieldLabel', 'label', array('class' => 'field-decorator-2'), array('position' => Xes_Decorator::PREPEND)), // for displaying label\r\n\t\t\tarray('Xes_Decorator_Tag', 'tag2', 'div', array('class' => 'field-decorator-3'),),// default override\r\n\t\t)\r\n\t)\r\n\t->getDecorator('label')// those decorators are for label not for form field\r\n\t->setDecorators(\r\n\t\tarray(\r\n\t\t\tarray('Xes_Decorator_Tag', 'star', 'div', array('class' => 'label-decorator-1'), '*', array('position' => Xes_Decorator::APPEND)),// default override\r\n\t\t\tarray('Xes_Decorator_Tag', 'tag', 'div', array('class' => 'label-decorator-2')),// default override\r\n\t\t)\r\n\t);\r\n\r\nThis will result in:\r\n\r\n\t<div class=\"field-decorator-3\">\r\n\t\t<div class=\"label-decorator-2\">\r\n\t\t\t<label class=\"field-decorator-2\" for=\"fieldId\">Value of field label</label>\r\n\t\t\t<span class=\"label-decorator-1\">*</span>\r\n\t\t</div>\r\n\t\t<div class=\"field-decorator-1\">\r\n\t\t\t<input type=\"text\" name=\"formField\" value=\"value of field\"/>\r\n\t\t</div>\r\n\t</div>\r\n\r\nTo populate form with data and validate it.\r\n \r\n\t$data = array(\r\n\t\t'mainFormFieldName1' => 1,\r\n\t\t'mainFormFieldName2' => 'asdfs',\r\n\t\t...,\r\n\t\t'subFormFieldName' => array(\r\n\t\t\t'subFormFieldName1' => 1,\r\n\t\t\t'subFormFieldName2' => 'zxc',\r\n\t\t\t...,\r\n\t\t\t'subsubFormFieldName' => array(\r\n\t\t\t\t'subsubFormFieldName1' => 1,\r\n\t\t\t\t'subsubFormFieldName2' => 'zxc',\r\n\t\t\t\t...,\r\n\t\t\t),\r\n\t\t),\r\n\t);\r\n\t$form->setValue($data); // populates form with data\r\n\t$form->isValid(); // returns true if data is valid form must be first populated with data by using setValue\r\n\r\nTODO\r\n---------------------\r\n\r\n* Add more field and validator types.\r\n* Easier way to group fields.\r\n* Add path access for fields and decorators.\r\n* Add some multilanguage support.\r\n* Build helper classes for fast building form fields. \r\n* Build serialization and deserialization helpers.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}